export const MasterDSA = [
  {
    courseId: 1,
    title: "JavaScript Fundamentals",
    description:
      "Master the core building blocks of JavaScript with a hands-on, beginner-friendly course. Learn variables, data types, operators, control flow, loops, functions, recursion, and scope through practical examples and interactive exercises.",
    price: 0,
    discount: 100,
    currency: "USD",
    level: 1,
    learnerCount: 43250,
    rating: 4.8,
    projects: 5,
    prerequisites: "Basic computer literacy",
    certificateAvailable: true,
    lastUpdated: "2025-06-15",
    skillsGained: [
      {
        title: "Variables and Data Types",
        description:
          "Understand and work with primitive and non-primitive data types in JavaScript.",
      },
      {
        title: "Control Flow Implementation",
        description:
          "Master conditional statements and control the flow of execution in your programs.",
      },
      {
        title: "Function Creation and Usage",
        description:
          "Create and use functions effectively to organize and reuse your code.",
      },
      {
        title: "Scope Management",
        description:
          "Understand variable scope and how it affects variable accessibility and lifetime.",
      },
      {
        title: "Basic Debugging Techniques",
        description:
          "Learn to identify and fix errors in your JavaScript code.",
      },
    ],
    content: {
      title: "JavaScript Fundamentals",
      modules: [
        {
          title: "Introduction to JavaScript",
          description:
            "Learn the core concepts of JavaScript and its runtime environment.",
          order: 0,
          lessons: [
            {
              title: "What is JavaScript?",
              type: "lecture",
              difficulty: "easy",
              lessonId: "67e7a846bc4faf7a65a7f0f1",
              duration: 10,
              isFree: true,
              content:
                "JavaScript is a scripting language that enables interactive web pages and server-side applications.",
            },
            {
              title: "How is JavaScript used?",
              type: "lecture",
              difficulty: "easy",
              lessonId: "67e79998b0dde286aeba1288",
              duration: 15,
              isFree: true,
              content:
                "Used for frontend interactivity, backend (Node.js), mobile apps, and even IoT devices.",
            },
            {
              title: "Introduction to the Console",
              type: "interactive",
              difficulty: "easy",
              lessonId: "67e79998b0dde286aeba1289",
              duration: 20,
              isFree: true,
              content:
                "Using browser/Node.js console for debugging and output.",
            },
            {
              title: "Introduction to Comments",
              type: "lecture",
              difficulty: "easy",
              lessonId: "67e79998b0dde286aeba1290",
              duration: 5,
              isFree: true,
              content: "// Single-line and /* Multi-line */ comment syntax.",
            },
            {
              title: "JavaScript Engines",
              type: "lecture",
              difficulty: "medium",
              lessonId: "67e79998b0dde286aeba1291",
              duration: 15,
              isFree: false,
              content:
                "V8 (Chrome), SpiderMonkey (Firefox), JavaScriptCore (Safari).",
            },
          ],
          createdAt: "2025-05-01T08:00:00.000Z",
          updatedAt: "2025-05-01T08:00:00.000Z",
        },
        {
          title: "Variables",
          description:
            "Understanding variable declaration and scoping in JavaScript.",
          order: 1,
          lessons: [
            {
              title: "What are Variables?",
              type: "lecture",
              difficulty: "easy",
              lessonId: "67e79998b0dde286aeba1292",
              duration: 10,
              isFree: true,
              content: "Containers for storing data values.",
            },
            {
              title: "Declaring with let",
              type: "interactive",
              difficulty: "easy",
              lessonId: "67e79998b0dde286aeba1293",
              duration: 15,
              isFree: true,
              content: "Block-scoped mutable variables: let x = 5;",
            },
            {
              title: "Declaring with const",
              type: "interactive",
              difficulty: "easy",
              lessonId: "67e79998b0dde286aeba1294",
              duration: 15,
              isFree: true,
              content: "Block-scoped immutable variables: const PI = 3.14;",
            },
            {
              title: "Declaring with var",
              type: "lecture",
              difficulty: "medium",
              lessonId: "67e79998b0dde286aeba1295",
              duration: 10,
              isFree: false,
              content: "Function-scoped variables (legacy): var y = 10;",
            },
            {
              title: "Temporal Dead Zone",
              type: "lecture",
              difficulty: "advanced",
              lessonId: "67e79998b0dde286aeba1296",
              duration: 20,
              isFree: false,
              content:
                "The period between hoisting and initialization where variables are inaccessible.",
            },
          ],
          createdAt: "2025-05-01T08:00:00.000Z",
          updatedAt: "2025-05-01T08:00:00.000Z",
        },
        {
          title: "Data Types",
          description: "Learn JavaScript's type system and data structures.",
          order: 2,
          lessons: [
            {
              title: "Primitive Data Types",
              type: "lecture",
              difficulty: "easy",
              lessonId: "67e79998b0dde286aeba1297",
              duration: 20,
              isFree: true,
              content:
                "string, number, boolean, undefined, null, symbol, bigint",
            },
            {
              title: "Non-Primitive Data Types",
              type: "lecture",
              difficulty: "easy",
              lessonId: "67e79998b0dde286aeba1298",
              duration: 15,
              isFree: true,
              content: "object (including arrays, functions, dates)",
            },
          ],
          createdAt: "2025-05-01T08:00:00.000Z",
          updatedAt: "2025-05-01T08:00:00.000Z",
        },
        {
          title: "Operators and Expressions",
          description:
            "Learn how to manipulate data using various operators in JavaScript.",
          order: 3,
          lessons: [
            {
              title: "Arithmetic Operators",
              type: "interactive",
              difficulty: "easy",
              lessonId: "someUniqueId1",
              duration: 15,
              isFree: true,
              content: "+, -, *, /, %, ++, --",
            },
            {
              title: "Logical Operators",
              type: "interactive",
              difficulty: "easy",
              lessonId: "someUniqueId2",
              duration: 15,
              isFree: true,
              content: "&&, ||, !",
            },
            {
              title: "Comparison Operators",
              type: "interactive",
              difficulty: "easy",
              lessonId: "someUniqueId3",
              duration: 15,
              isFree: true,
              content: "==, ===, !=, !==, >, <, >=, <=",
            },
            {
              title: "Assignment Operators",
              type: "interactive",
              difficulty: "easy",
              lessonId: "someUniqueId4",
              duration: 10,
              isFree: true,
              content: `=, +=, -=, *=, /=`,
            },
            {
              title: "Ternary (Conditional) Operator",
              type: "lecture",
              difficulty: "medium",
              lessonId: "someUniqueId5",
              duration: 10,
              isFree: false,
              content: "condition ? exprIfTrue : exprIfFalse",
            },
            {
              title: "Operator Precedence and Associativity",
              type: "lecture",
              difficulty: "medium",
              lessonId: "someUniqueId6",
              duration: 20,
              isFree: false,
              content: "Understanding the order of operations in JavaScript.",
            },
          ],
          createdAt: "2025-05-01T08:00:00.000Z",
          updatedAt: "2025-05-01T08:00:00.000Z",
        },
        {
          title: "Control Flow",
          description:
            "Learn how to control the execution of your JavaScript code.",
          order: 4,
          lessons: [
            {
              title: "if statement",
              type: "interactive",
              difficulty: "easy",
              lessonId: "someUniqueId7",
              duration: 15,
              isFree: true,
              content: "Executing code based on a condition.",
            },
            {
              title: "else if statement",
              type: "interactive",
              difficulty: "easy",
              lessonId: "someUniqueId8",
              duration: 10,
              isFree: true,
              content: "Checking multiple conditions.",
            },
            {
              title: "else statement",
              type: "interactive",
              difficulty: "easy",
              lessonId: "someUniqueId9",
              duration: 5,
              isFree: true,
              content: "Executing code when no if/else if condition is true.",
            },
            {
              title: "switch statement",
              type: "interactive",
              difficulty: "medium",
              lessonId: "someUniqueId10",
              duration: 20,
              isFree: false,
              content: "Selecting one of many code blocks to execute.",
            },
            {
              title: "break and continue keywords",
              type: "lecture",
              difficulty: "medium",
              lessonId: "someUniqueId11",
              duration: 15,
              isFree: false,
              content:
                "Controlling the flow within loops and switch statements.",
            },
          ],
          createdAt: "2025-05-01T08:00:00.000Z",
          updatedAt: "2025-05-01T08:00:00.000Z",
        },
        {
          title: "Loops",
          description:
            "Learn how to automate repetitive tasks using loops in JavaScript.",
          order: 5,
          lessons: [
            {
              title: "for loop",
              type: "interactive",
              difficulty: "easy",
              lessonId: "someUniqueId12",
              duration: 20,
              isFree: true,
              content: "Looping a block of code a specific number of times.",
            },
            {
              title: "while loop",
              type: "interactive",
              difficulty: "easy",
              lessonId: "someUniqueId13",
              duration: 15,
              isFree: true,
              content:
                "Looping a block of code as long as a condition is true.",
            },
            {
              title: "do...while loop",
              type: "interactive",
              difficulty: "easy",
              lessonId: "someUniqueId14",
              duration: 15,
              isFree: true,
              content:
                "A variation of the while loop that executes the code block once before checking the condition.",
            },
            {
              title: "for...in loop",
              type: "lecture",
              difficulty: "medium",
              lessonId: "someUniqueId15",
              duration: 15,
              isFree: false,
              content: "Iterating over enumerable properties of an object.",
            },
            {
              title: "for...of loop",
              type: "lecture",
              difficulty: "medium",
              lessonId: "someUniqueId16",
              duration: 15,
              isFree: false,
              content:
                "Iterating over values of iterable objects (arrays, strings, etc.).",
            },
            {
              title: "Getting the sum of array values using for loop",
              type: "practice",
              difficulty: "medium",
              lessonId: "someUniqueId17",
              duration: 25,
              isFree: false,
              content:
                "Practical exercise: calculate the sum of numbers in an array.",
            },
            {
              title: "Getting max value of the element using while loop",
              type: "practice",
              difficulty: "medium",
              lessonId: "someUniqueId18",
              duration: 25,
              isFree: false,
              content:
                "Practical exercise: find the maximum value in an array.",
            },
          ],
          createdAt: "2025-05-01T08:00:00.000Z",
          updatedAt: "2025-05-01T08:00:00.000Z",
        },
        {
          title: "Recursion",
          description: "Explore the concept of recursion in JavaScript.",
          order: 6,
          lessons: [
            {
              title: "What is Recursion?",
              type: "lecture",
              difficulty: "medium",
              lessonId: "someUniqueId19",
              duration: 15,
              isFree: false,
              content: "A function calling itself.",
            },
            {
              title: "Base and Recursive Case",
              type: "lecture",
              difficulty: "medium",
              lessonId: "someUniqueId20",
              duration: 15,
              isFree: false,
              content: "Essential components of a recursive function.",
            },
            {
              title: "Count a factorial using recursion",
              type: "practice",
              difficulty: "medium",
              lessonId: "someUniqueId21",
              duration: 25,
              isFree: false,
              content:
                "Practical exercise: calculate factorial using recursion.",
            },
            {
              title: "Bring sum using recursion",
              type: "practice",
              difficulty: "medium",
              lessonId: "someUniqueId22",
              duration: 20,
              isFree: false,
              content:
                "Practical exercise: calculate sum of numbers using recursion.",
            },
            {
              title: "Reverse a string / Countdown Timer",
              type: "practice",
              difficulty: "medium",
              lessonId: "someUniqueId23",
              duration: 30,
              isFree: false,
              content:
                "Practical exercises: reverse a string and implement a countdown timer using recursion.",
            },
          ],
          createdAt: "2025-05-01T08:00:00.000Z",
          updatedAt: "2025-05-01T08:00:00.000Z",
        },
        {
          title: "Function Advance",
          description:
            "Explore advanced concepts related to functions in JavaScript.",
          order: 7,
          lessons: [
            {
              title: "Call mode function",
              type: "lecture",
              difficulty: "advanced",
              lessonId: "someUniqueId24",
              duration: 20,
              isFree: false,
              content:
                "Understanding how 'this' behaves in different function call contexts.",
            },
            {
              title: "High order function",
              type: "lecture",
              difficulty: "advanced",
              lessonId: "someUniqueId25",
              duration: 20,
              isFree: false,
              content:
                "Functions that operate on other functions, either by taking them as arguments or by returning them.",
            },
            {
              title: "Anonymous function",
              type: "lecture",
              difficulty: "medium",
              lessonId: "someUniqueId26",
              duration: 15,
              isFree: false,
              content: "Functions without a name.",
            },
            {
              title: "Closure",
              type: "lecture",
              difficulty: "advanced",
              lessonId: "someUniqueId27",
              duration: 25,
              isFree: false,
              content:
                "Functions that remember their lexical scope even when executed outside that scope.",
            },
          ],
          createdAt: "2025-05-01T08:00:00.000Z",
          updatedAt: "2025-05-01T08:00:00.000Z",
        },
        {
          title: "Scope",
          description:
            "Understanding variable accessibility and lifetime in JavaScript.",
          order: 8,
          lessons: [
            {
              title: "Lexical Scope",
              type: "lecture",
              difficulty: "medium",
              lessonId: "someUniqueId28",
              duration: 20,
              isFree: false,
              content:
                "Scope determined by where variables and blocks of code are written.",
            },
            {
              title: "Global Scope",
              type: "lecture",
              difficulty: "easy",
              lessonId: "someUniqueId29",
              duration: 10,
              isFree: true,
              content: "Variables declared outside of any function or block.",
            },
            {
              title: "Block Scope",
              type: "lecture",
              difficulty: "medium",
              lessonId: "someUniqueId30",
              duration: 15,
              isFree: false,
              content:
                "Variables declared with let and const are limited to the block they are defined in.",
            },
          ],
          createdAt: "2025-05-01T08:00:00.000Z",
          updatedAt: "2025-05-01T08:00:00.000Z",
        },
      ],
      metadata: {
        totalDuration: 605,
        freeLessons: 12,
        premiumLessons: 18,
        lastUpdated: "2025-05-01",
      },
    },
  },
];
